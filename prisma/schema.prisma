generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Configuraciones globales para el sistema
model AppConfig {
  id Int @id @default(1) @map("_id") // Config única (singleton)

  // General
  logoUrl                   String? @db.VarChar(255)
  isMaintenanceMode         Boolean @default(false) // ¿La plataforma está en mantenimiento?
  googleAnalyticsTrackingId String? // ID de seguimiento de Google Analytics
  // considerar redes sociales pagina de mantenimiento también la necesita o solo incluir en el footer

  // Usuario
  isUserSignUpEnabled               Boolean @default(true) // Permitir registros
  maxActiveSessionsPerUser          Int?    @default(3) // Límite de sesiones por usuario
  isSingleUserPerIpOrDeviceEnforced Boolean @default(false) // ¿Evitar múltiples usuarios por IP?
  isEmailVerificationRequired       Boolean @default(false) // ¿Verificación de email requerida?
  isGlobalTwoFactorAuthEnabled      Boolean @default(false) // ¿Está activo el 2FA globalmente?
  sessionTimeoutLimitMinutes        Int?    @default(30) // Tiempo de expiración de sesión en minutos

  // SEO Global
  siteDisplayName      String? // Nombre de la plataforma
  siteUrl              String? // URL principal (https://midominio.com)
  siteDescription      String? @db.VarChar(255)
  faviconUrl           String? @db.VarChar(255)
  defaultLocale        String  @default("es")
  isSiteNoIndexEnabled Boolean @default(false)
  seoDefaultKeywords   String? @db.VarChar(255)

  // SMTP Config
  emailHost         String? @db.VarChar(255)
  emailPort         Int?    @default(587)
  emailUser         String? @db.VarChar(255) // Correo de contacto o soporte
  emailPassEnc      String? @db.Text // Encriptada
  isEmailConfigured Boolean @default(false) // Indica si está listo para usar

  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de última modificación
}

// Sesiones activas por usuario
model User {
  id                 String    @id @default(cuid()) // ID único del usuario
  email              String    @unique // Email del usuario
  emailVerified      DateTime? // Fecha en que se verificó el email
  hashedPassword     String? // Hash de la contraseña
  name               String? // Nombre opcional
  image              String?   @db.VarChar(255) // Avatar o imagen de perfil
  isTwoFactorEnabled Boolean   @default(false) // ¿Tiene 2FA activado?
  twoFactorSecretKey String? // Clave secreta para 2FA
  role               Role      @default(USER) // El Rol que hace este usuario
  createdAt          DateTime  @default(now()) // Fecha de creación
  updatedAt          DateTime  @updatedAt // Fecha de última modificación

  sessions          UserSession[] // Relación con sesiones activas
  loginAttempts     UserLoginAttempt[] // Relación con intentos de login
  registrations     UserRegistrationLog[] // Registros de IP/dispositivo en registro
  auditLogs         UserAuditLog[] // Acciones del usuario
  verificationToken UserVerificationToken[] // Registro de Tokens
  blockedIp         UserBlockedIp[]
  blockedIpLog      UserBlockedIpLog[]

  // términos y condiciones
  // acceptedTermsAt DateTime?
  // acceptedPrivacyPolicyAt DateTime?

  //  referidos
  // referralCode String? @unique
  // referredBy   String? // ID del usuario que refirió
  // referrer     User?   @relation("Referrals", fields: [referredBy], references: [id])

  @@index([emailVerified]) // índices en campos frecuentemente consultados:
}

// Sesiones activas por usuario
model UserSession {
  id               String    @id @default(cuid()) // ID de la sesión
  userId           String // Relación con el usuario
  user             User      @relation(fields: [userId], references: [id])
  ipAddress        String? // Dirección IP de la sesión
  userAgent        String? // Dispositivo/navegador usado
  createdAt        DateTime  @default(now()) // Fecha de creación
  sessionExpiresAt DateTime? // Fecha de expiración de la sesión

  @@index([sessionExpiresAt]) // Índice para consultar sesiones expiradas rápidamente
  @@index([ipAddress]) // Índice para buscar rápidamente sesiones por IP
}

// Tokens para verificación de email o recuperación
model UserVerificationToken {
  id                String    @id @default(cuid()) // ID del token
  userId            String // Usuario al que pertenece
  verificationToken String    @unique // Token único
  tokenType         TokenType // Tipo: "email", "password_reset", etc.
  expiresAt         DateTime // Fecha de expiración
  createdAt         DateTime  @default(now()) // Fecha de creación
  updatedAt         DateTime  @updatedAt // Fecha de última modificación

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, tokenType])
  @@index([expiresAt])
  @@map("UserVerificationToken")
}

// Historial de IP/dispositivo al registrarse
model UserRegistrationLog {
  id        String   @id @default(cuid()) // ID del log
  userId    String // Usuario que se registró
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String // IP desde donde se registró
  deviceId  String? // Identificador del dispositivo
  createdAt DateTime @default(now()) // Fecha del registro

  @@index([ipAddress, deviceId]) // Búsqueda rápida por IP
}

// Intentos de login exitosos o fallidos
model UserLoginAttempt {
  id                String   @id @default(cuid()) // ID del intento
  userId            String? // Usuario (opcional si no existe aún)
  user              User?    @relation(fields: [userId], references: [id])
  email             String // Email con el que intentó entrar
  ipAddress         String? // IP de origen
  isSuccessfulLogin Boolean // ¿Fue exitoso?
  createdAt         DateTime @default(now()) // Fecha del intento

  @@index([ipAddress])
  @@map("UserLoginAttempt")
}

// Registro de acciones importantes del usuario
model UserAuditLog {
  id              String   @id @default(cuid()) // ID del log
  userId          String // Usuario que hizo la acción
  user            User     @relation(fields: [userId], references: [id])
  auditAction     String // Acción realizada (ej: login, update-profile)
  ipAddress       String? // IP de origen
  metadata        Json? // guardar datos adicionales como payloads, IDs afectados, etc.
  userAgentString String? // Navegador/dispositivo usado
  createdAt       DateTime @default(now()) // Fecha del evento
  updatedAt       DateTime @updatedAt // Fecha de última modificación

  @@index([createdAt])
  @@map("UserAuditLog")
}

// IPs bloqueadas manual o automáticamente
model UserBlockedIp {
  id                  String    @id @default(cuid()) // ID único para el bloqueo
  ipAddress           String    @unique // IP bloqueada
  blockReason         String? // Razón del bloqueo (ej: "intentos fallidos", "actividad sospechosa")
  failedLoginAttempts Int       @default(0) // Número de intentos fallidos antes de bloquear
  userId              String? // Relación opcional con el usuario
  User                User?     @relation(fields: [userId], references: [id])
  blockStartAt        DateTime  @default(now()) // Fecha de bloqueo
  blockExpiresAt      DateTime? //manejar bloqueos temporales.

  @@index([blockStartAt])
  @@map("UserBlockedIp")
}

// 🚀 Propuesta de flujo (automatizable):
// En cada intento de login fallido, se graba un UserLoginAttempt.
// Se cuenta cuántos intentos fallidos tiene esa IP en los últimos X minutos.
// Si supera el umbral, se crea (o actualiza) un UserBlockedIp.
// En cada login o request, se revisa si la IP está en UserBlockedIp (y si el bloqueo no ha expirado).
// Opcional: usar expiresAt para manejar bloqueos temporales.
// Si piensas usar limpieza automática de bloqueos expirados, considera una tarea cron cada X horas que elimine los expirados
// DELETE FROM "UserBlockedIp" WHERE "expiresAt" IS NOT NULL AND "expiresAt" < NOW();

// para llevar un historial permanente de las veces que sea bloqueado un usuario
model UserBlockedIpLog {
  id                  String    @id @default(cuid())
  ipAddress           String
  blockReason         String?
  failedLoginAttempts Int
  blockStartAt        DateTime
  blockEndAt          DateTime? // Si se eliminó el bloqueo
  userId              String?
  user                User?     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
  ACCOUNT_DELETION
}
